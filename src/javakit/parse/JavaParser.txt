
JavaFile { PackageDecl? ImportDecl* TypeDecl+ JavaFileImports* JeplFile? }

JavaFileImports { PackageDecl? ImportDecl* }

JeplFile { ImportDecl* JeplNode* }

JeplNode
{
    LookAhead (Modifiers TypeParams? ResultType Identifier "(") Modifiers MethodDecl |
    LookAhead (Modifiers "enum") Modifiers EnumDecl |
    BlockStatement
}

PackageDecl { LookAhead (Annotation* "package") Modifiers "package" Name ";" }

ImportDecl { "import" "static"? Name ("." "*")? ";" }

Modifiers { Modifier* }

Modifier
{
    "public" | "static" | "protected" | "private" | "final" | "abstract" | "synchronized" |
    "default" | "native" | "transient" | "volatile" | "strictfp" | Annotation
}

TypeDecl { ";" | Modifiers (ClassDecl | EnumDecl | AnnotationDecl) }

ClassDecl
{
    (("class" | "interface") Identifier TypeParams? ExtendsList? ImplementsList? ClassBody) |
    (("record" Identifier TypeParams? FormalParams ImplementsList? ClassBody))
}

ExtendsList { "extends" ClassType ("," ClassType)* }

ImplementsList { "implements" ClassType ("," ClassType)* }

ClassBody { "{" ClassBodyDecl* "}" }

ClassBodyDecl
{
    LookAhead ("static"? "{") Initializer |
    Modifiers MemberDecl | ";"
}

EnumDecl
{
    "enum" Identifier ImplementsList? "{" (EnumConstant (LookAhead(2) "," EnumConstant)*)? ","? (";" ClassBodyDecl*)? "}"
}

EnumConstant { Modifiers Identifier Arguments? ClassBody? }

Initializer { "static"? Block }

MemberDecl
{
    ClassDecl |
    EnumDecl |
    ConstrDecl |
    FieldDecl |
    MethodDecl |
    AnnotationDecl
}

FieldDecl
{
    LookAhead (Type Identifier ("[" "]")* ("," | "=" | ";"))
    Type VarDecl ("," VarDecl)* ";"
}

ConstrDecl
{
    LookAhead (TypeParams? Identifier ("(" | "{") )
    TypeParams? Identifier FormalParams? ThrowsList? "{" (LookAhead (ConstrCall) ConstrCall)? BlockStatement* "}"
}

ConstrCall
{
    (Identifier ".")* (LookAhead(2) "this" ".")? TypeArgs? ("this" | "super") Arguments ";"
}

MethodDecl
{
    TypeParams? ResultType Identifier FormalParams ("[" "]")* ThrowsList? (Block | ";")
}

FormalParams { "(" (FormalParam ("," FormalParam)*)? ")" }

FormalParam { ("final" | Annotation)? Type "..."? Identifier ("[" "]")* }

ThrowsList { "throws" Name ("," Name)* }

Type { ReferenceType | PrimitiveType }

PrimitiveType { "boolean" | "char" | "byte" | "short" | "int" | "long" | "float" | "double" }

ReferenceType { LookAhead(3) PrimitiveType ("[" "]")+ | ClassType (LookAhead(2) "[" "]")* }

ArrayType { LookAhead(3) PrimitiveType ("[" "]")+ | ClassType ("[" "]")+ }

ClassType { Identifier (LookAhead(2) TypeArgs)? (LookAhead(2) "." Identifier (LookAhead(2) TypeArgs)?)* }

ResultType { "void" | Type }

Block { "{" BlockStatement* "}" }

BlockStatement
{
    LookAhead (VarDeclExpr) VarDeclExpr ";" |
    Statement |
    ClassDecl
}

VarDeclExpr { Modifiers Type VarDecl ("," VarDecl)* }

VarDecl { Identifier ("[" "]")* ("=" VarInit)? }

VarInit { ArrayInit | Expression }

ArrayInit { "{" (VarInit (LookAhead(2) "," VarInit)*)? ","? "}" }

Statement
{
    Block |
    IfStatement | ForStatement | WhileStatement | DoStatement |
    BreakStatement | ContinueStatement | ReturnStatement |
    SwitchStatement | AssertStatement | EmptyStatement |
    ThrowStatement | SynchronizedStatement | TryStatement |
    LabeledStatement |
    ExprStatement ";"
}

IfStatement { "if" "(" Expression ")" Statement ("else" Statement)? }

ForStatement { "for" "(" ForIteration ")" Statement }

ForIteration
{
    LookAhead ( VarDeclExpr ":" ) VarDeclExpr ":" Expression |
    ForInit? ";" Expression? ";" ForExprList?
}

ForInit
{
    LookAhead (Modifiers Type Identifier) VarDeclExpr |
    ForExprList
}

ForExprList { Expression ("," Expression)* }

WhileStatement { "while" "(" Expression ")" Statement }

DoStatement { "do" Statement "while" "(" Expression ")" ";" }

BreakStatement { "break" Identifier? ";" }

ContinueStatement { "continue" Identifier? ";" }

ReturnStatement { "return" Expression? ";" }

SwitchStatement { "switch" "(" Expression ")" "{" (SwitchLabel BlockStatement*)* "}" }

SwitchLabel { "case" Expression ":" | "default" ":" }

AssertStatement { "assert" Expression (":" Expression)? ";" }

EmptyStatement { ";" }

ThrowStatement { "throw" Expression ";" }

SynchronizedStatement { "synchronized" "(" Expression | ")" Block }

TryStatement
{
    "try" ResourceSpec? Block
    ("catch" "(" FormalParam ")" Block)*
    ("finally" Block)?
}

ResourceSpec { "(" Resource (LookAhead(2) ";" Resource)* ";"? ")" }

Resource
{
    LookAhead (Modifiers Type VarDecl) VarDeclExpr |
    PrimaryExpr
}

LabeledStatement
{
    LookAhead(2)
    Identifier ":" Statement
}

ExprStatement
{
    PreIncrementExpr |
    PrimaryExpr ("++" | "--" | AssignOp Expression)?
}

Expression { ConditionalExpr (AssignOp Expression)? }  // Was LookAhead(2)

ConditionalExpr { ConditionalOrExpr ("?" Expression ":" Expression)? }

ConditionalOrExpr { ConditionalAndExpr ("||" ConditionalAndExpr)* }

ConditionalAndExpr { InclusiveOrExpr ("&&" InclusiveOrExpr)* }

InclusiveOrExpr { ExclusiveOrExpr ("|" ExclusiveOrExpr)* }

ExclusiveOrExpr { AndExpr ("^" AndExpr)* }

AndExpr { EqualityExpr ("&" EqualityExpr)* }

EqualityExpr { InstanceOfExpr (("==" | "!=") InstanceOfExpr)* }

InstanceOfExpr { RelationalExpr ("instanceof" Type)? }

RelationalExpr { ShiftExpr (("<=" | ">=" | "<" | ">") ShiftExpr)* }

ShiftExpr { AdditiveExpr (("<<" | ShiftRightUnsigned | ShiftRight) AdditiveExpr)* }

ShiftRight { LookAhead(2) ">" ">" }

ShiftRightUnsigned { LookAhead(3) ">" ">" ">" }

AdditiveExpr { MultiplicativeExpr (("+" | "-") MultiplicativeExpr)* }

MultiplicativeExpr { UnaryExpr (("*" | "/" | "%") UnaryExpr)* }

UnaryExpr { ("+" | "-") UnaryExpr | PreIncrementExpr | UnaryExprNotPlusMinus }

PreIncrementExpr { ("++" | "--") PrimaryExpr }

UnaryExprNotPlusMinus { ("~" | "!") UnaryExpr | LookAhead (CastLook) CastExpr | PostfixExpr }

PostfixExpr { PrimaryExpr ("++" | "--")? }

PrimaryExpr { PrimaryPrefix PrimarySuffix* }

PrimaryPrefix
{
    Literal |
    LookAhead ((Identifier ".")* "this") (Identifier ".")* "this" |
    "super" "." Identifier |
    LookAhead (ClassType "." "super" "." Identifier) ClassType "." "super" "." Identifier |
    LambdaExpr |
    "(" Expression ")" |
    AllocExpr |
    LookAhead (ResultType "." "class") ResultType "." "class" |
    LookAhead (ArrayType) ReferenceType |
    Name
}

PrimarySuffix
{
    LookAhead(2) "." "super" |
    LookAhead(2) "." "this" |
    LookAhead(2) "." AllocExpr |
    LookAhead(2) "." TypeArgs? Identifier |
    "[" Expression "]" |
    "::" (Identifier | "new") |
    Arguments
}

AssignOp { "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=" }

Arguments { "(" (Expression ("," Expression)*)? ")" }

AllocExpr
{
    LookAhead(2) "new" PrimitiveType ArrayDimsAndInits |
    "new" ClassType TypeArgs? (ArrayDimsAndInits | Arguments ClassBody?)
}

ArrayDimsAndInits
{
    LookAhead(2) (LookAhead(2) "[" Expression "]")+ (LookAhead(2) "[" "]")* | ("[" "]")+ ArrayInit
}

CastExpr
{
    LookAhead ("(" PrimitiveType) "(" Type ")" UnaryExpr |
    "(" Type ")" UnaryExprNotPlusMinus
}

CastLook
{
    LookAhead(2) "(" PrimitiveType |
    LookAhead ("(" Type "[") "(" Type "[" "]" |
    "(" Type ")" ("~" | "!" | "(" | Identifier | "this" | "super" | "new" | Literal)
}

LambdaExpr
{
    LookAhead (Identifier "->") Identifier "->" (Expression | Block) |
    LookAhead ("(" Identifier ("," Identifier)* ")" "->") "(" Identifier ("," Identifier)* ")" "->" (Expression | Block) |
    LookAhead (FormalParams "->") FormalParams "->" (Expression | Block)
}

Name { Identifier (LookAhead(2) "." Identifier)* }

Identifier { "[$_a-zA-Z][$\w]*" }

Literal { IntegerLiteral | FloatLiteral | CharacterLiteral | StringLiteral | BooleanLiteral | NullLiteral }

IntegerLiteral { IntLiteral | HexLiteral | OctalLiteral }

IntLiteral { "[1-9][0-9]*[lL]?" }

HexLiteral { "0[xX][0-9a-fA-F]+[lL]?" }

OctalLiteral { "0[0-7]*[lL]?" }

FloatLiteral { "(([\d]+\.[\d]*)|(\.[\d]+)|([\d]+))([eE][\+\-]?[\d]+)?[fFdD]?" }

CharacterLiteral { "'(([^'\\\n\r])|(\\([ntbrf\\'\"]|[0-7][0-7]?|[0-3][0-7][0-7]|u[\da-fA-F]{4})))'" }

StringLiteral { "\"(([^\"\\\n\r])|(\\([ntbrf\\'\"]|[0-7][0-7]?|[0-3][0-7][0-7]|u[\da-fA-F]{4})))*\"" }

NullLiteral { "null" }

BooleanLiteral { "true" | "false" }

TypeParams { "<" TypeParam ("," TypeParam)* ">" }

TypeParam { Identifier TypeBound? }

TypeBound { "extends" ClassType ("&" ClassType)* }

TypeArgs { "<" (TypeArg ("," TypeArg)*)? ">" }

TypeArg { ReferenceType | "?" WildcardBounds? }

WildcardBounds { "extends" ReferenceType | "super" ReferenceType }

Annotation
{
    LookAhead ("@" Name "(" (Identifier "=" | ")")) NormalAnnotation |
    LookAhead ("@" Name "(") SingleMemberAnnotation |
    MarkerAnnotation
}

AnnotationDecl { "@" "interface" Identifier }

SingleMemberAnnotation { "@" Name "(" MemberValue ")" }

MarkerAnnotation { "@" Name }

NormalAnnotation { "@" Name "(" MemberValuePairs? ")" }

MemberValuePairs { MemberValuePair ("," MemberValuePair)* }

MemberValuePair { Identifier "=" MemberValue }

MemberValue { Annotation | MemberValueArrayInit | ConditionalExpr }

MemberValueArrayInit { "{" (MemberValue (LookAhead(2) "," MemberValue)*)? "}" }
